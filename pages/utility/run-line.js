// import { gsap } from 'gsap'
// import { MotionPathPlugin } from 'gsap/MotionPathPlugin'
// import { SplitText } from 'gsap/SplitText'

// gsap.registerPlugin(MotionPathPlugin, SplitText)

// // –§—É–Ω–∫—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –ø–æ –ø—É—Ç–∏
// export function animateTextOnPath(
// 	textSelector,
// 	pathSelector,
// 	duration = 20,
// 	staggerEach = 0.3,
// 	pathStart = 1,
// 	pathEnd = 0,
// 	initialProgress = 0.5
// ) {
// 	const textElement = document.querySelector(textSelector)
// 	const pathElement = document.querySelector(pathSelector)

// 	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω—ã –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã
// 	if (!textElement || !pathElement) {
// 		console.error(
// 			`–≠–ª–µ–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤: ${textSelector}, ${pathSelector}`
// 		)
// 		return
// 	}

// 	// –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª–æ–≤–∞
// 	const words = new SplitText(textElement, { type: 'words' })

// 	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è –ø—Ä–æ–±–µ–ª—ã
// 	const newChars = []
// 	words.words.forEach((word, index) => {
// 		// –†–∞–∑–±–∏–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –Ω–∞ —Å–∏–º–≤–æ–ª—ã
// 		const chars = new SplitText(word, { type: 'words, chars' }).chars
// 		newChars.push(...chars)

// 		if (index < words.words.length - 1) {
// 			// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏
// 			const space = document.createElement('span')
// 			space.innerHTML = '&nbsp;'
// 			space.classList.add('space')
// 			newChars.push(space)
// 		}
// 	})

// 	// –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ —Å–∏–º–≤–æ–ª—ã —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
// 	textElement.innerHTML = ''
// 	newChars.forEach(char => textElement.appendChild(char))

// 	// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
// 	const updatedChars = Array.from(textElement.children)

// 	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ –æ—Å—è–º X –∏ Y
// 	gsap.set(updatedChars, { xPercent: -50, yPercent: -50 })

// 	// –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å GSAP
// 	const tl = gsap.timeline({ repeat: -1 }).to(updatedChars, {
// 		duration: duration, // –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
// 		motionPath: {
// 			path: pathElement,
// 			align: pathElement,
// 			alignOrigin: [0.5, 0.5],
// 			autoRotate: true, // –í–∫–ª—é—á–∞–µ–º autoRotate
// 			start: pathStart, // –ù–∞—á–∏–Ω–∞–µ–º —Å –∫–æ–Ω—Ü–∞ –ø—É—Ç–∏
// 			end: pathEnd, // –î–≤–∏–∂–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É –ø—É—Ç–∏
// 		},
// 		ease: 'linear',
// 		stagger: {
// 			each: staggerEach, // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏
// 			repeat: -1,
// 			from: 'end', // –ù–∞—á–∞–ª–æ —Å –ø–µ—Ä–≤–æ–π –±—É–∫–≤—ã
// 		},
// 		immediateRender: true,
// 	})

// 	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
// 	tl.progress(initialProgress)

// 	return tl
// }

// // –§—É–Ω–∫—Ü–∏—è debounce –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ —ç–∫—Ä–∞–Ω–∞
// function debounce(func, wait = 100) {
// 	let timeout
// 	return function () {
// 		clearTimeout(timeout)
// 		timeout = setTimeout(() => func.apply(this, arguments), wait)
// 	}
// }

// // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ —ç–∫—Ä–∞–Ω–∞
// export function setupResizeListener(animationConfig) {
// 	let animations = []

// 	function initAllAnimations() {
// 		// –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
// 		if (animations.length > 0) {
// 			animations.forEach(tl => tl.kill())
// 		}

// 		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
// 		animations = animationConfig.map(({ textSelector, pathSelector }) =>
// 			animateTextOnPath(textSelector, pathSelector)
// 		)
// 	}

// 	// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è resize —Å debounce
// 	window.addEventListener(
// 		'resize',
// 		debounce(() => {
// 			initAllAnimations() // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –æ–∫–Ω–∞
// 		}, 200)
// 	)

// 	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
// 	initAllAnimations()
// }


import { gsap } from 'gsap'
import { MotionPathPlugin } from 'gsap/MotionPathPlugin'
import { SplitText } from 'gsap/SplitText'

gsap.registerPlugin(MotionPathPlugin, SplitText)

// –û—Å–Ω–æ–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ SVG –ø—É—Ç–∏
export function animateTextOnPath(
	textSelector,
	pathSelector,
	duration = 20,
	staggerEach = 0.3,
	pathStart = 0,
	pathEnd = 1,
	initialProgress = 0
) {
	const textElement = document.querySelector(textSelector)
	const pathElement = document.querySelector(pathSelector)

	if (!textElement || !pathElement) {
		console.error(`‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${textSelector} –∏–ª–∏ ${pathSelector}`)
		return
	}

	const pathLength = pathElement.getTotalLength()

	// –°–±—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞
	textElement.innerHTML = textElement.textContent.trim()

	// –°–ø–ª–∏—Ç —Ç–µ–∫—Å—Ç–∞
	const splitWords = new SplitText(textElement, { type: 'words' })
	let chars = []

	splitWords.words.forEach((word, index) => {
		const charSplit = new SplitText(word, { type: 'chars' })
		chars.push(...charSplit.chars)

		if (index < splitWords.words.length - 1) {
			const space = document.createElement('span')
			space.innerHTML = '&nbsp;'
			space.classList.add('space')
			chars.push(space)
		}
	})

	// === üîÅ –†–ê–ó–í–û–†–û–¢ —Ç–µ–∫—Å—Ç–∞ ===
	chars = chars.reverse()

	// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
	const measureDiv = document.createElement('div')
	measureDiv.style.cssText = `
		position: absolute;
		visibility: hidden;
		white-space: nowrap;
	`
	chars.forEach(char => {
		char.style.display = 'inline-block'
		measureDiv.appendChild(char.cloneNode(true))
	})
	document.body.appendChild(measureDiv)

	const totalTextWidth = measureDiv.offsetWidth
	document.body.removeChild(measureDiv)

	// –ü–æ–≤—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è –¥–ª–∏–Ω—ã –ø—É—Ç–∏
	const repeatCount = Math.ceil(pathLength / totalTextWidth)
	const repeatedChars = []

	for (let i = 0; i < repeatCount + 1; i++) {
		chars.forEach(char => {
			const clone = char.cloneNode(true)
			clone.style.display = 'inline-block'
			repeatedChars.push(clone)
			char.style.letterSpacing = '0.05em'
		})
	}

	textElement.innerHTML = ''
	repeatedChars.forEach(char => textElement.appendChild(char))

	const updatedChars = Array.from(textElement.children)
	gsap.set(updatedChars, {
		xPercent: -50,
		yPercent: -50,
	})

	const tl = gsap.timeline({ repeat: -1, defaults: { ease: 'linear' } })

	tl.to(updatedChars, {
		duration,
		motionPath: {
			path: pathElement,
			align: pathElement,
			alignOrigin: [0.5, 0.5],
			autoRotate: true,
			start: pathStart,
			end: pathEnd,
		},
		stagger: {
			each: pathLength / updatedChars.length / 100, // –ø–æ–¥–≥–æ–Ω–∫–∞ spacing'–∞
			repeat: -1,
			from: 'start',
		},
		immediateRender: true,
	})

	tl.progress(initialProgress)
	return tl
}

// Debounce-—Ñ—É–Ω–∫—Ü–∏—è
export function debounce(func, wait = 100) {
	let timeout
	return function (...args) {
		clearTimeout(timeout)
		timeout = setTimeout(() => func.apply(this, args), wait)
	}
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∞–Ω–∏–º–∞—Ü–∏–π —Å –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ–º –ø—Ä–∏ —Ä–µ—Å–∞–π–∑–µ
export function setupResizeListener(animationConfig) {
	let animations = []

	function initAllAnimations() {
		if (animations.length > 0) animations.forEach(tl => tl.kill())
		animations = animationConfig.map(({ textSelector, pathSelector }) =>
			animateTextOnPath(textSelector, pathSelector)
		)
	}

	window.addEventListener(
		'resize',
		debounce(() => initAllAnimations(), 200)
	)

	initAllAnimations()
}
