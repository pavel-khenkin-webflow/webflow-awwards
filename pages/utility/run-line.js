// import { gsap } from 'gsap'
// import { MotionPathPlugin } from 'gsap/MotionPathPlugin'
// import { SplitText } from 'gsap/SplitText'

// gsap.registerPlugin(MotionPathPlugin, SplitText)

// // –§—É–Ω–∫—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –ø–æ –ø—É—Ç–∏
// export function animateTextOnPath(
// 	textSelector,
// 	pathSelector,
// 	duration = 20,
// 	staggerEach = 0.3,
// 	pathStart = 1,
// 	pathEnd = 0,
// 	initialProgress = 0.5
// ) {
// 	const textElement = document.querySelector(textSelector)
// 	const pathElement = document.querySelector(pathSelector)

// 	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω—ã –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã
// 	if (!textElement || !pathElement) {
// 		console.error(
// 			`–≠–ª–µ–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤: ${textSelector}, ${pathSelector}`
// 		)
// 		return
// 	}

// 	// –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª–æ–≤–∞
// 	const words = new SplitText(textElement, { type: 'words' })

// 	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è –ø—Ä–æ–±–µ–ª—ã
// 	const newChars = []
// 	words.words.forEach((word, index) => {
// 		// –†–∞–∑–±–∏–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –Ω–∞ —Å–∏–º–≤–æ–ª—ã
// 		const chars = new SplitText(word, { type: 'words, chars' }).chars
// 		newChars.push(...chars)

// 		if (index < words.words.length - 1) {
// 			// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏
// 			const space = document.createElement('span')
// 			space.innerHTML = '&nbsp;'
// 			space.classList.add('space')
// 			newChars.push(space)
// 		}
// 	})

// 	// –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ —Å–∏–º–≤–æ–ª—ã —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
// 	textElement.innerHTML = ''
// 	newChars.forEach(char => textElement.appendChild(char))

// 	// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
// 	const updatedChars = Array.from(textElement.children)

// 	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ –æ—Å—è–º X –∏ Y
// 	gsap.set(updatedChars, { xPercent: -50, yPercent: -50 })

// 	// –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å GSAP
// 	const tl = gsap.timeline({ repeat: -1 }).to(updatedChars, {
// 		duration: duration, // –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
// 		motionPath: {
// 			path: pathElement,
// 			align: pathElement,
// 			alignOrigin: [0.5, 0.5],
// 			autoRotate: true, // –í–∫–ª—é—á–∞–µ–º autoRotate
// 			start: pathStart, // –ù–∞—á–∏–Ω–∞–µ–º —Å –∫–æ–Ω—Ü–∞ –ø—É—Ç–∏
// 			end: pathEnd, // –î–≤–∏–∂–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É –ø—É—Ç–∏
// 		},
// 		ease: 'linear',
// 		stagger: {
// 			each: staggerEach, // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏
// 			repeat: -1,
// 			from: 'end', // –ù–∞—á–∞–ª–æ —Å –ø–µ—Ä–≤–æ–π –±—É–∫–≤—ã
// 		},
// 		immediateRender: true,
// 	})

// 	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
// 	tl.progress(initialProgress)

// 	return tl
// }

// // –§—É–Ω–∫—Ü–∏—è debounce –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ —ç–∫—Ä–∞–Ω–∞
// function debounce(func, wait = 100) {
// 	let timeout
// 	return function () {
// 		clearTimeout(timeout)
// 		timeout = setTimeout(() => func.apply(this, arguments), wait)
// 	}
// }

// // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ —ç–∫—Ä–∞–Ω–∞
// export function setupResizeListener(animationConfig) {
// 	let animations = []

// 	function initAllAnimations() {
// 		// –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
// 		if (animations.length > 0) {
// 			animations.forEach(tl => tl.kill())
// 		}

// 		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
// 		animations = animationConfig.map(({ textSelector, pathSelector }) =>
// 			animateTextOnPath(textSelector, pathSelector)
// 		)
// 	}

// 	// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è resize —Å debounce
// 	window.addEventListener(
// 		'resize',
// 		debounce(() => {
// 			initAllAnimations() // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –æ–∫–Ω–∞
// 		}, 200)
// 	)

// 	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
// 	initAllAnimations()
// }


// utility/run-line.js

// export function setupTextPathAnimations(pairs) {
// 	const animations = []
  
// 	function initAll() {
// 	  animations.forEach(anim => cancelAnimationFrame(anim.raf))
// 	  animations.length = 0
  
// 	  pairs.forEach(({ textSelector, pathClass, idSuffix }) => {
// 		const paragraph = document.querySelector(textSelector)
// 		const path = document.querySelector(`.${pathClass}`)
// 		const svg = path?.closest('svg')
  
// 		if (!paragraph || !path || !svg) return
  
// 		const pathId = `path-${idSuffix}`
// 		path.setAttribute('id', pathId)
  
// 		svg.querySelector('text')?.remove()
  
// 		const computedStyles = getComputedStyle(paragraph)
// 		const fontSize = computedStyles.fontSize
// 		const fontFamily = computedStyles.fontFamily
// 		const color = computedStyles.color
  
// 		const textEl = document.createElementNS('http://www.w3.org/2000/svg', 'text')
// 		textEl.setAttribute('font-size', fontSize)
// 		textEl.setAttribute('font-family', fontFamily)
// 		textEl.setAttribute('fill', color)
  
// 		const textPathEl = document.createElementNS('http://www.w3.org/2000/svg', 'textPath')
// 		textPathEl.setAttribute('href', `#${pathId}`)
// 		textPathEl.setAttribute('startOffset', '0%')
  
// 		textEl.appendChild(textPathEl)
// 		svg.appendChild(textEl)
  
// 		const pathLength = path.getTotalLength()
  
// 		const dummy = document.createElement('span')
// 		dummy.style.visibility = 'hidden'
// 		dummy.style.whiteSpace = 'nowrap'
// 		dummy.style.fontSize = fontSize
// 		dummy.style.fontFamily = fontFamily
// 		dummy.textContent = paragraph.textContent
// 		document.body.appendChild(dummy)
// 		const baseTextWidth = dummy.offsetWidth
// 		dummy.remove()
  
// 		const repeatCount = Math.ceil((pathLength * 2.5) / baseTextWidth)
// 		const repeatedText = paragraph.textContent.repeat(repeatCount)
// 		textPathEl.textContent = repeatedText
  
// 		paragraph.style.display = 'none'
  
// 		let offset = 0
// 		const speed = 0.1
// 		function animate() {
// 		  offset = (offset - speed + 100) % 100
// 		  textPathEl.setAttribute('startOffset', `${offset}%`)
// 		  anim.raf = requestAnimationFrame(animate)
// 		}
  
// 		const anim = { raf: null }
// 		animations.push(anim)
// 		animate()
// 	  })
// 	}
  
// 	function debounce(func, wait = 200) {
// 	  let timeout
// 	  return function () {
// 		clearTimeout(timeout)
// 		timeout = setTimeout(() => func(), wait)
// 	  }
// 	}
  
// 	window.addEventListener('resize', debounce(initAll))
// 	initAll()
//   }
  
// export function setupTextPathAnimations(pairs) {
// 	const animations = []
  
// 	function initAll() {
// 	  animations.forEach(anim => cancelAnimationFrame(anim.raf))
// 	  animations.length = 0
  
// 	  pairs.forEach(({ textSelector, pathClass, idSuffix }) => {
// 		const paragraph = document.querySelector(textSelector)
// 		const path = document.querySelector(`.${pathClass}`)
// 		const svg = path?.closest('svg')
  
// 		if (!paragraph || !path || !svg) return
  
// 		const pathId = `path-${idSuffix}`
// 		path.setAttribute('id', pathId)
  
// 		svg.querySelector('text')?.remove()
  
// 		const computedStyles = getComputedStyle(paragraph)
// 		const fontSize = computedStyles.fontSize
// 		const fontFamily = computedStyles.fontFamily
// 		const color = computedStyles.color
  
// 		const textEl = document.createElementNS('http://www.w3.org/2000/svg', 'text')
// 		textEl.setAttribute('font-size', fontSize)
// 		textEl.setAttribute('font-family', fontFamily)
// 		textEl.setAttribute('fill', color)
// 		textEl.setAttribute('dominant-baseline', 'top')
// 		textEl.setAttribute('dy', '0.35em')
  
// 		const textPathEl = document.createElementNS('http://www.w3.org/2000/svg', 'textPath')
// 		textPathEl.setAttribute('href', `#${pathId}`)
// 		textPathEl.setAttribute('startOffset', '0%')
  
// 		textEl.appendChild(textPathEl)
// 		svg.appendChild(textEl)
  
// 		// üî• –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏–Ω—ã –ø—É—Ç–∏ –∏ —à–∏—Ä–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
// 		const baseText = paragraph.textContent.trim()
// 		const pathLength = path.getTotalLength()
  
// 		const dummy = document.createElement('span')
// 		dummy.style.visibility = 'hidden'
// 		dummy.style.whiteSpace = 'nowrap'
// 		dummy.style.fontSize = fontSize
// 		dummy.style.fontFamily = fontFamily
// 		dummy.textContent = baseText
// 		document.body.appendChild(dummy)
// 		const baseTextWidth = dummy.offsetWidth
// 		dummy.remove()
  
// 		// –ü–æ–≤—Ç–æ—Ä—è–µ–º, —á—Ç–æ–±—ã –∏—Ç–æ–≥–æ–≤–∞—è –¥–ª–∏–Ω–∞ –±—ã–ª–∞ ‚â• 2.5 √ó –¥–ª–∏–Ω—ã –ø—É—Ç–∏
// 		const repeatCount = Math.ceil((pathLength * 2.5) / baseTextWidth)
// 		const finalText = baseText.repeat(repeatCount)
// 		textPathEl.textContent = finalText
  
// 		paragraph.style.display = 'none'
  
// 		// –ê–Ω–∏–º–∞—Ü–∏—è
// 		let offset = 0
// 		const speed = 0.1
  
// 		function animate() {
// 		  offset = (offset - speed) % 100
// 		  textPathEl.setAttribute('startOffset', `${offset}%`)
// 		  anim.raf = requestAnimationFrame(animate)
// 		}
  
// 		const anim = { raf: null }
// 		animations.push(anim)
// 		animate()
// 	  })
// 	}
  
// 	function debounce(func, wait = 200) {
// 	  let timeout
// 	  return function () {
// 		clearTimeout(timeout)
// 		timeout = setTimeout(() => func(), wait)
// 	  }
// 	}
  
// 	window.addEventListener('resize', debounce(initAll))
// 	initAll()
//   }
  

export function setupTextPathAnimations(pairs) {
	const animations = []

	function initAll() {
		// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—à–ª—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏
		animations.forEach(anim => cancelAnimationFrame(anim.raf))
		animations.length = 0

		pairs.forEach(({ textSelector, pathClass, idSuffix }) => {
			const paragraph = document.querySelector(textSelector)
			const path = document.querySelector(`.${pathClass}`)
			const svg = path?.closest('svg')

			if (!paragraph || !path || !svg) return

			// –ù–∞–∑–Ω–∞—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø—É—Ç–∏
			const pathId = `path-${idSuffix}`
			path.setAttribute('id', pathId)

			// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π <text>, –µ—Å–ª–∏ –µ—Å—Ç—å
			const oldText = svg.querySelector('text')
			if (oldText) oldText.remove()

			// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
			const computedStyles = getComputedStyle(paragraph)
			const fontSize = computedStyles.fontSize
			const fontFamily = computedStyles.fontFamily
			const color = computedStyles.color

			// –°–æ–∑–¥–∞–µ–º SVG <text>
			const textEl = document.createElementNS('http://www.w3.org/2000/svg', 'text')
			textEl.setAttribute('font-size', fontSize)
			textEl.setAttribute('font-family', fontFamily)
			textEl.setAttribute('fill', color)
			textEl.setAttribute('dominant-baseline', 'top')
			textEl.setAttribute('dy', '0.35em')
			textEl.setAttribute('text-anchor', 'middle')

			// –û—Ç–∑–µ—Ä–∫–∞–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ SVG
			if (idSuffix === '2') {
				const bbox = path.getBBox()
				const centerX = bbox.x + bbox.width / 2
				const centerY = bbox.y + bbox.height / 2

				// –°–Ω–∞—á–∞–ª–∞ –¥–≤–∏–≥–∞–µ–º –≤ —Ü–µ–Ω—Ç—Ä, –ø–æ—Ç–æ–º –æ—Ç—Ä–∞–∂–∞–µ–º, –ø–æ—Ç–æ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
				const transform = `
					translate(${2 * centerX}, ${2 * centerY})
					scale(-1, -1)
				`
				textEl.setAttribute('transform', transform.trim())
			}

			// –°–æ–∑–¥–∞–µ–º <textPath> –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –µ–≥–æ –∫ –ø—É—Ç–∏
			const textPathEl = document.createElementNS('http://www.w3.org/2000/svg', 'textPath')
			textPathEl.setAttribute('href', `#${pathId}`)
			textPathEl.setAttribute('startOffset', '0%')

			textEl.appendChild(textPathEl)
			svg.appendChild(textEl)

			// –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é –ø–æ –¥–ª–∏–Ω–µ –ø—É—Ç–∏
			const baseText = paragraph.textContent.trim()
			const pathLength = path.getTotalLength()

			const dummy = document.createElement('span')
			dummy.style.visibility = 'hidden'
			dummy.style.whiteSpace = 'nowrap'
			dummy.style.fontSize = fontSize
			dummy.style.fontFamily = fontFamily
			dummy.textContent = baseText
			document.body.appendChild(dummy)
			const baseTextWidth = dummy.offsetWidth
			dummy.remove()

			const repeatCount = Math.ceil((pathLength * 2.5) / baseTextWidth)
			const finalText = baseText.repeat(repeatCount)
			textPathEl.textContent = finalText

			paragraph.style.display = 'none'

			// –ê–Ω–∏–º–∞—Ü–∏—è: –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç idSuffix
			let offset
			if (idSuffix === '2') {
				offset = -100 // —Å—Ç–∞—Ä—Ç—É–µ–º —Å–ø—Ä–∞–≤–∞, –¥–≤–∏–≥–∞–µ–º—Å—è –≤–ø—Ä–∞–≤–æ
			} else {
				offset = 0 // —Å—Ç–∞—Ä—Ç—É–µ–º —Å–ª–µ–≤–∞, –¥–≤–∏–≥–∞–µ–º—Å—è –≤–ª–µ–≤–æ
			}

			const speed = 0.2

			function animate() {
				if (idSuffix === '2') {
					offset = (offset + speed) % 100 // –≤–ø—Ä–∞–≤–æ
				} else {
					offset = (offset - speed + 100) % 100 // –≤–ª–µ–≤–æ
				}
				textPathEl.setAttribute('startOffset', `${offset}%`)
				anim.raf = requestAnimationFrame(animate)
			}

			const anim = { raf: null }
			animations.push(anim)
			animate()
		})
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ resize —Å debounce
	function debounce(func, wait = 200) {
		let timeout
		return function () {
			clearTimeout(timeout)
			timeout = setTimeout(() => func(), wait)
		}
	}

	window.addEventListener('resize', debounce(initAll))
	initAll()
}
